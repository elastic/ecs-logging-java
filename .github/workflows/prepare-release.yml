---
name: Prepare Release

on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'Branch or tag ref to run the workflow on'
        required: true
        default: 'main'
      version:
        description: 'The version to release (e.g. 1.2.3). This workflow will automatically perform the required version bumps'
        required: true

env:
  JAVA_VERSION: 17
  JAVA_DIST: temurin
  RELEASE_VERSION: ${{ inputs.version }}

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}

jobs:
  create_pr:
    name: "Bump versions and create PR"
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: elastic/apm-pipeline-library/.github/actions/github-token@current
        with:
          url: ${{ secrets.VAULT_ADDR }}
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}

      - uses: elastic/apm-pipeline-library/.github/actions/setup-git@current
        with:
          username: ${{ env.GIT_USER }}
          email: ${{ env.GIT_EMAIL }}
          token: ${{ env.GITHUB_TOKEN }}

      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || 'main' }}
          token: ${{ env.GITHUB_TOKEN }}

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DIST }}
          cache: 'maven'

      - name: Create a prepare release branch
        run: git checkout -b prepare-release-v${{ env.RELEASE_VERSION }}

      - name: Bump versions
        run: |
          ./mvnw -V versions:set -DprocessAllModules=true -DgenerateBackupPoms=false -DnewVersion=${{ env.RELEASE_VERSION }}
          git add --all
          git commit -m "release: ecs-logging-java v${{ env.RELEASE_VERSION }}"

      - name: Push the prepare release branch
        run: git push origin prepare-release-v${{ env.RELEASE_VERSION }}

      - name: Create the prepare release PR
        run: gh pr create --title="Prepare Release v${{ env.RELEASE_VERSION }}" --base main --head prepare-release-v${{ env.RELEASE_VERSION }} -b "New Release v${{ env.RELEASE_VERSION }}"
