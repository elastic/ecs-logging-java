[[intro]]
== Introduction

Centralized logging for Java applications with the Elastic stack made easy


NOTE: this library is in a **beta** version and backwards-incompatible changes might be introduced in future releases while the major version is zero (0.x.x).

image:https://user-images.githubusercontent.com/2163464/62682932-9cac3600-b9bd-11e9-9cc3-39e907280f8e.png[]

[float]
=== What is ECS?

Elastic Common Schema (ECS) defines a common set of fields for ingesting data into Elasticsearch.
For more information about ECS, visit the [ECS Reference Documentation](https://www.elastic.co/guide/en/ecs/current/ecs-reference.html).

[float]
=== What is ECS logging?

This library helps to log ECS-compatible JSON into a file

Example:

```
{"@timestamp":"2019-08-06T12:09:12.375Z", "log.level": "INFO", "message":"Tomcat started on port(s): 8080 (http) with context path ''", "service.name":"spring-petclinic","process.thread.name":"restartedMain","log.logger":"org.springframework.boot.web.embedded.tomcat.TomcatWebServer"}
{"@timestamp":"2019-08-06T12:09:12.379Z", "log.level": "INFO", "message":"Started PetClinicApplication in 7.095 seconds (JVM running for 9.082)", "service.name":"spring-petclinic","process.thread.name":"restartedMain","log.logger":"org.springframework.samples.petclinic.PetClinicApplication"}
{"@timestamp":"2019-08-06T14:08:40.199Z", "log.level":"DEBUG", "message":"init find form", "service.name":"spring-petclinic","process.thread.name":"http-nio-8080-exec-8","log.logger":"org.springframework.samples.petclinic.owner.OwnerController","transaction.id":"28b7fb8d5aba51f1","trace.id":"2869b25b5469590610fea49ac04af7da"}
{"@timestamp":"2019-09-17T13:16:48.038Z", "log.level":"ERROR", "message":"Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.RuntimeException: Expected: controller used to showcase what happens when an exception is thrown] with root cause", "process.thread.name":"http-nio-8080-exec-1","log.logger":"org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet]","log.origin":{"file.name":"DirectJDKLog.java","function":"log","file.line":175},"error.type":"java.lang.RuntimeException","error.message":"Expected: controller used to showcase what happens when an exception is thrown","error.stack_trace":[
	"java.lang.RuntimeException: Expected: controller used to showcase what happens when an exception is thrown",
	"\tat org.springframework.samples.petclinic.system.CrashController.triggerException(CrashController.java:33)",
	"\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
	"\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)",
	"\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
	"\tat java.lang.reflect.Method.invoke(Method.java:498)",
	"\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)",
	"\tat java.lang.Thread.run(Thread.java:748)"]}
```

[float]
=== Why ECS logging?

* No parsing of the log file required \
Logging in ECS-compatible JSON has the advantage that you don't need to set up a logstash/ingest node pipeline to parse logs using grok.
* No external dependencies
* Highly efficient by manually serializing JSON
* Low/Zero allocations (reduces GC pauses) \
The log4j2 `EcsLayout` does not allocate any memory (unless the log event contains an `Exception`)
* Decently human-readable JSON structure \
The first three fields are always `@timestamp`, `log.level` and `message`.
It's also possible to format stack traces so that each element is rendered in a new line.
* Use the Kibana [Logs UI](https://www.elastic.co/guide/en/kibana/7.3/xpack-logs.html) without additional configuration \
As this library adheres to [ECS](https://www.elastic.co/guide/en/ecs/current/ecs-reference.html), the Logs UI knows which fields to show
* Using a common schema across different services and teams makes it possible create reusable dashboards and avoids [mapping explosions](https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping.html#mapping-limit-settings).

[float]
==== APM Log correlation

If you are using the [Elastic APM Java agent](https://www.elastic.co/guide/en/apm/agent/java/current/index.html),
you can leverage the [log correlation feature](https://www.elastic.co/guide/en/apm/agent/java/current/config-logging.html#config-enable-log-correlation) without any additional configuration.

This lets you jump from the [Span timeline in the APM UI](https://www.elastic.co/guide/en/kibana/master/spans.html) to the
[Logs UI](https://www.elastic.co/guide/en/kibana/7.3/xpack-logs.html),
showing only the logs which belong to the corresponding request.
Vice versa, you can also jump from a log line in the Logs UI to the Span Timeline of the APM UI.

[float]
==== Additional advantages when using in combination with Filebeat

We recommend using this library to log into a JSON log file and let Filebeat send the logs to Elasticsearch

* Resilient in case of outages +
https://www.elastic.co/guide/en/beats/filebeat/current/how-filebeat-works.html#at-least-once-delivery[Guaranteed at-least-once delivery]
without buffering within the application, thus no risk of `OutOfMemoryError`s or lost events.
There's also the option to use either the JSON logs or plain-text logs as a fallback.
* Loose coupling +
The application does not need to know the details of the logging backend (URI, credentials, etc.).
You can also leverage alternative https://www.elastic.co/guide/en/beats/filebeat/current/configuring-output.html[Filebeat outputs],
like Logstash, Kafka or Redis.
* Index Lifecycle management +
Leverage Filebeat's default https://www.elastic.co/guide/en/beats/filebeat/master/ilm.html[index lifemanagement settings].
This is much more efficient than using daily indices.
* Efficient Elasticsearch mappings +
Leverage Filebeat's default ECS-compatible https://www.elastic.co/guide/en/beats/filebeat/master/configuration-template.html[index template]

[float]
=== Mapping

|===
|ECS field | Log4j2 API  |
|https://www.elastic.co/guide/en/ecs/current/ecs-base.html[`@timestamp`]
|https://logging.apache.org/log4j/log4j-2.3/log4j-core/apidocs/org/apache/logging/log4j/core/LogEvent.html#getTimeMillis()[`LogEvent#getTimeMillis()`]

|https://www.elastic.co/guide/en/ecs/current/ecs-log.html[`log.level`]
|https://logging.apache.org/log4j/log4j-2.3/log4j-core/apidocs/org/apache/logging/log4j/core/LogEvent.html#getLevel()[`LogEvent#getLevel()`]

|https://www.elastic.co/guide/en/ecs/current/ecs-log.html[`log.logger`]
|https://logging.apache.org/log4j/log4j-2.3/log4j-core/apidocs/org/apache/logging/log4j/core/LogEvent.html#getLoggerName()[`LogEvent#getLoggerName()`]

|https://www.elastic.co/guide/en/ecs/current/ecs-log.html[`log.origin.file.name`]
|https://docs.oracle.com/javase/6/docs/api/java/lang/StackTraceElement.html#getFileName()[`StackTraceElement#getFileName()`]

|https://www.elastic.co/guide/en/ecs/current/ecs-log.html[`log.origin.file.line`]
|https://docs.oracle.com/javase/6/docs/api/java/lang/StackTraceElement.html#getLineNumber()[`StackTraceElement#getLineNumber()`]

|https://www.elastic.co/guide/en/ecs/current/ecs-log.html[`log.origin.function`]
|https://docs.oracle.com/javase/6/docs/api/java/lang/StackTraceElement.html#getMethodName()[`StackTraceElement#getMethodName()`]

|https://www.elastic.co/guide/en/ecs/current/ecs-base.html[`message`]
|https://logging.apache.org/log4j/log4j-2.3/log4j-core/apidocs/org/apache/logging/log4j/core/LogEvent.html#getMessage()[`LogEvent#getMessage()`]

|https://www.elastic.co/guide/en/ecs/current/ecs-error.html[`error.type`]
|https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#getClass()[`Throwable#getClass()`]

|https://www.elastic.co/guide/en/ecs/current/ecs-error.html[`error.message`]
|https://docs.oracle.com/javase/7/docs/api/java/lang/Throwable.html#getMessage()[`Throwable#getMessage()`]

|https://www.elastic.co/guide/en/ecs/current/ecs-error.html[`error.stack_trace`]
|https://docs.oracle.com/javase/7/docs/api/java/lang/Throwable.html#getStackTrace()[`Throwable#getStackTrace()`]

|https://www.elastic.co/guide/en/ecs/current/ecs-process.html[`process.thread.name`]
|https://logging.apache.org/log4j/log4j-2.3/log4j-core/apidocs/org/apache/logging/log4j/core/LogEvent.html#getThreadName()[`LogEvent#getThreadName()`]

|Each MDC entry is a top-level field footnote:[
It's recommended to use existing https://www.elastic.co/guide/en/ecs/current/ecs-field-reference.html[ECS fields] for MDC values.
If there is no appropriate ECS field,
consider prefixing your fields with `labels.`, as in `labels.foo`, for simple key/value pairs.
For nested structures consider prefixing with `custom.` to make sure you won't get conflicts if ECS later adds the same fields but with a different mapping.
]
|https://logging.apache.org/log4j/log4j-2.3/log4j-core/apidocs/org/apache/logging/log4j/core/LogEvent.html#getContextMap()[`LogEvent#getContextMap()`]

|https://www.elastic.co/guide/en/ecs/current/ecs-base.html[`tags`]
|https://logging.apache.org/log4j/log4j-2.3/log4j-core/apidocs/org/apache/logging/log4j/core/LogEvent.html#getContextStack()[`LogEvent#getContextStack()`]
|===




