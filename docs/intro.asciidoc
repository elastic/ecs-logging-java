[[intro]]
== Introduction

Centralized logging for Java applications with the Elastic stack made easy.


NOTE: This library is in **beta**. Backward-incompatible changes might be introduced in future releases while the major version is zero (0.x.x).

[role="screenshot"]
image:https://user-images.githubusercontent.com/2163464/62682932-9cac3600-b9bd-11e9-9cc3-39e907280f8e.png[]

[float]
=== What is ECS?

Elastic Common Schema (ECS) defines a common set of fields for ingesting data into Elasticsearch.
For more information about ECS, visit the {ecs-ref}/ecs-reference.html[ECS Reference Documentation].

[float]
=== What is ECS logging?

ECS loggers are formatter/encoder plugins for your favorite logging library.
They make it easy to format your logs into ECS-compatible JSON. For example:
[source,json]
----
{"@timestamp":"2019-08-06T12:09:12.375Z", "log.level": "INFO", "message":"Tomcat started on port(s): 8080 (http) with context path ''", "service.name":"spring-petclinic","process.thread.name":"restartedMain","log.logger":"org.springframework.boot.web.embedded.tomcat.TomcatWebServer"}
{"@timestamp":"2019-08-06T12:09:12.379Z", "log.level": "INFO", "message":"Started PetClinicApplication in 7.095 seconds (JVM running for 9.082)", "service.name":"spring-petclinic","process.thread.name":"restartedMain","log.logger":"org.springframework.samples.petclinic.PetClinicApplication"}
{"@timestamp":"2019-08-06T14:08:40.199Z", "log.level":"DEBUG", "message":"init find form", "service.name":"spring-petclinic","process.thread.name":"http-nio-8080-exec-8","log.logger":"org.springframework.samples.petclinic.owner.OwnerController","transaction.id":"28b7fb8d5aba51f1","trace.id":"2869b25b5469590610fea49ac04af7da"}
{"@timestamp":"2019-09-17T13:16:48.038Z", "log.level":"ERROR", "message":"Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.RuntimeException: Expected: controller used to showcase what happens when an exception is thrown] with root cause", "process.thread.name":"http-nio-8080-exec-1","log.logger":"org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/].[dispatcherServlet]","log.origin":{"file.name":"DirectJDKLog.java","function":"log","file.line":175},"error.type":"java.lang.RuntimeException","error.message":"Expected: controller used to showcase what happens when an exception is thrown","error.stack_trace":[
	"java.lang.RuntimeException: Expected: controller used to showcase what happens when an exception is thrown",
	"\tat org.springframework.samples.petclinic.system.CrashController.triggerException(CrashController.java:33)",
	"\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
	"\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)",
	"\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
	"\tat java.lang.reflect.Method.invoke(Method.java:498)",
	"\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)",
	"\tat java.lang.Thread.run(Thread.java:748)"]}
----

[float]
=== Why ECS logging?

*No parsing of the log file required*::
+
--
ECS-compatible JSON doesn't require the use of Logstash or grok parsing via an ingest node pipeline.
--

*No external dependencies*::
+
--
By not using any external dependencies such as JSON serializers,
the library is incredibly lightweight.
--

*Highly efficient*::
+
--
The log4j2 `EcsLayout` does not allocate any memory (unless the log event contains an `Exception`) which reduces GC pressure.
This is achieved by manually serializing JSON so that no intermediate JSON or map representation of a log event is needed.
--

*Decently human-readable JSON structure*::
+
--
The first three fields are always `@timestamp`, `log.level` and `message`.
It's also possible to format stack traces so that each element is rendered in a new line.
--

*Enjoy the benefits of a common schema*::
+
--
Use the Kibana {observability-guide}/monitor-logs.html[Logs app] without additional configuration.

Using a common schema across different services and teams makes it possible create reusable dashboards and avoids {ref}/mapping.html#mapping-limit-settings[mapping explosions].
--

*APM Log correlation*::
+
--
If you are using the {apm-java-ref}/index.html[Elastic APM Java agent],
you can leverage the {apm-java-ref}/config-logging.html#config-enable-log-correlation[log correlation feature] without any additional configuration.
This lets you jump from the {kibana-ref}/spans.html[Span timeline in the APM UI] to the {observability-guide}/monitor-logs.html[Logs app],
showing only the logs which belong to the corresponding request.
Vice versa, you can also jump from a log line in the Logs UI to the Span Timeline of the APM UI.
--

[float]
==== Additional advantages when using in combination with Filebeat

We recommend using this library to log into a JSON log file and using Filebeat to send the logs to Elasticsearch. Here are a few benefits to this approach.

*Resilient in case of outages*::
+
--
{filebeat-ref}/how-filebeat-works.html#at-least-once-delivery[Guaranteed at-least-once delivery]
without buffering within the application, thus no risk of `OutOfMemoryError` s or lost events.
There's also the option to use either the JSON logs or plain-text logs as a fallback.
--

*Loose coupling*::
+
--
The application does not need to know the details of the logging backend (URI, credentials, etc.).
You can also leverage alternative {filebeat-ref}/configuring-output.html[Filebeat outputs],
like Logstash, Kafka or Redis.
--

*Index Lifecycle management*::
+
--
Leverage Filebeat's default {filebeat-ref}/ilm.html[index lifecycle management settings].
This is much more efficient than using daily indices.
--

*Efficient Elasticsearch mappings*::
+
--
Leverage Filebeat's default ECS-compatible {filebeat-ref}/configuration-template.html[index template]
--

[float]
=== Mapping

|===
|ECS field | Log4j2 API
|{ecs-ref}/ecs-base.html[`@timestamp`]
|https://logging.apache.org/log4j/log4j-2.3/log4j-core/apidocs/org/apache/logging/log4j/core/LogEvent.html#getTimeMillis()[`LogEvent#getTimeMillis()`]

|{ecs-ref}/ecs-log.html[`log.level`]
|https://logging.apache.org/log4j/log4j-2.3/log4j-core/apidocs/org/apache/logging/log4j/core/LogEvent.html#getLevel()[`LogEvent#getLevel()`]

|{ecs-ref}/ecs-log.html[`log.logger`]
|https://logging.apache.org/log4j/log4j-2.3/log4j-core/apidocs/org/apache/logging/log4j/core/LogEvent.html#getLoggerName()[`LogEvent#getLoggerName()`]

|{ecs-ref}/ecs-log.html[`log.origin.file.name`]
|https://docs.oracle.com/javase/6/docs/api/java/lang/StackTraceElement.html#getFileName()[`StackTraceElement#getFileName()`]

|{ecs-ref}/ecs-log.html[`log.origin.file.line`]
|https://docs.oracle.com/javase/6/docs/api/java/lang/StackTraceElement.html#getLineNumber()[`StackTraceElement#getLineNumber()`]

|{ecs-ref}/ecs-log.html[`log.origin.function`]
|https://docs.oracle.com/javase/6/docs/api/java/lang/StackTraceElement.html#getMethodName()[`StackTraceElement#getMethodName()`]

|{ecs-ref}/ecs-base.html[`message`]
|https://logging.apache.org/log4j/log4j-2.3/log4j-core/apidocs/org/apache/logging/log4j/core/LogEvent.html#getMessage()[`LogEvent#getMessage()`]

|{ecs-ref}/ecs-error.html[`error.type`]
|https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#getClass()[`Throwable#getClass()`]

|{ecs-ref}/ecs-error.html[`error.message`]
|https://docs.oracle.com/javase/7/docs/api/java/lang/Throwable.html#getMessage()[`Throwable#getMessage()`]

|{ecs-ref}/ecs-error.html[`error.stack_trace`]
|https://docs.oracle.com/javase/7/docs/api/java/lang/Throwable.html#getStackTrace()[`Throwable#getStackTrace()`]

|{ecs-ref}/ecs-process.html[`process.thread.name`]
|https://logging.apache.org/log4j/log4j-2.3/log4j-core/apidocs/org/apache/logging/log4j/core/LogEvent.html#getThreadName()[`LogEvent#getThreadName()`]

|Each MDC entry is a top-level field footnote:[
We recommend using existing {ecs-ref}/ecs-field-reference.html[ECS fields] for MDC values.
If there is no appropriate ECS field,
consider prefixing your fields with `labels.`, as in `labels.foo`, for simple key/value pairs.
For nested structures, consider prefixing with `custom.`. This approach protects against conflicts in case ECS later adds the same fields but with a different mapping.
]
|https://logging.apache.org/log4j/log4j-2.3/log4j-core/apidocs/org/apache/logging/log4j/core/LogEvent.html#getContextMap()[`LogEvent#getContextMap()`]

|{ecs-ref}/ecs-base.html[`tags`]
|https://logging.apache.org/log4j/log4j-2.3/log4j-core/apidocs/org/apache/logging/log4j/core/LogEvent.html#getContextStack()[`LogEvent#getContextStack()`]
|===
