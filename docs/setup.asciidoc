[[setup]]
== Get started

include::./tab-widgets/code.asciidoc[]

[float]
[[setup-step-1]]
=== Step 1: Configure application logging

If you are using the Elastic APM Java agent, the easiest way to transform your logs into ECS-compatible JSON format is through the
{apm-java-ref}/config-logging.html#config-log-ecs-reformatting[`log_ecs_reformatting`] configuration option.
By only setting this option, the Java agent will automatically import the correct ECS-logging library and configure your logging
framework to use it instead (`OVERRIDE`/`REPLACE`) or in addition to (`SHADE`) your current configuration. No other changes required!
Make sure to check out other {apm-java-ref}/config-logging.html[Logging configuration options] to unlock the full potential of this option.

Otherwise, follow the steps below to manually apply ECS-formatting through your logging framework configuration.
The following logging frameworks are supported:

* Logback (default for Spring Boot)
* Log4j2
* Log4j
* `java.util.logging` (JUL)
* JBoss Log Manager

[float]
==== Add the dependency

include::./tab-widgets/add-dependency-widget.asciidoc[]

[float]
==== Use the ECS encoder/formatter/layout

include::./tab-widgets/ecs-encoder-widget.asciidoc[]

NOTE: If you're using the Elastic APM Java agent,
log correlation is enabled by default starting in version 1.30.0.
In previous versions, log correlation is off by default, but can be enabled by setting
the `enable_log_correlation` config to `true`.

[float]
[[setup-step-2]]
=== Step 2: Configure Filebeat

include::{ecs-repo-dir}/setup.asciidoc[tag=configure-filebeat]

[float]
[[setup-stack-trace-as-array]]
==== When `stackTraceAsArray` is enabled

Filebeat can normally only decode JSON if there is one JSON object per line.
When `stackTraceAsArray` is enabled, there will be a new line for each stack trace element which improves readability.
But when combining the multiline settings with a `decode_json_fields` we can also handle multi-line JSON:

[source,yml]
----
filebeat.inputs:
  - type: log
    paths: /path/to/logs.json
    multiline.pattern: '^{'
    multiline.negate: true
    multiline.match: after
processors:
  - decode_json_fields:
      fields: message
      target: ""
      overwrite_keys: true
  # flattens the array to a single string
  - script:
      when:
        has_fields: ['error.stack_trace']
      lang: javascript
      id: my_filter
      source: >
        function process(event) {
            event.Put("error.stack_trace", event.Get("error.stack_trace").join("\n"));
        }
----
